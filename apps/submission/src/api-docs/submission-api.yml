# Description of Submission API

/submission/{submissionId}:
  get:
    summary: Get submission by ID
    tags:
      - Submission
    parameters:
      - name: submissionId
        in: path
        type: string
        required: true
    security:
      - bearerAuth: []
    responses:
      200:
        description: Submission details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionResult'

      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'

  delete:
    summary: Clear an Active Submission by ID
    tags:
      - Submission
    parameters:
      - name: submissionId
        in: path
        type: string
        required: true
    security:
      - bearerAuth: []
    responses:
      200:
        description: Submission cleared successfully. Returns the current Active Submission
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionResult'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      404:
        $ref: '#/components/responses/NotFound'
      409:
        $ref: '#/components/responses/StatusConflict'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'

/submission/{submissionId}/{actionType}:
  delete:
    summary: Clear Active Submission by entity name
    tags:
      - Submission
    parameters:
      - name: submissionId
        in: path
        type: string
        required: true
        description: The ID of the Submission
      - name: actionType
        in: path
        required: true
        schema:
          type: string
          enum: [inserts, updates, deletes]
        description: Parameter to specify the type of record to remove from the Submission. Must be one of `inserts`, `updates`, or `deletes` (case insensitive)
      - name: entityName
        in: query
        type: string
        required: true
        description: The name of the entity
      - name: index
        in: query
        required: false
        schema:
          type: integer
        description: |
          An optional query parameter used to specify the index of the item within the submission type to be deleted. 
          <br/>
          <br/> `NOTE: First record/index will start at 0, not 1`
          <br/> If not provided all the items within the submission type will be deleted.
    security:
      - bearerAuth: []
    responses:
      200:
        description: Submission cleared successfully. Returns the current Active Submission
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionResult'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      404:
        $ref: '#/components/responses/NotFound'
      409:
        $ref: '#/components/responses/StatusConflict'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'

/submission/category/{categoryId}:
  get:
    summary: Retrieve the Submissions for a category in this user session
    tags:
      - Submission
    parameters:
      - $ref: '#/components/parameters/path/CategoryId'
      - $ref: '#/components/parameters/query/Page'
      - $ref: '#/components/parameters/query/PageSize'
      - $ref: '#/components/parameters/query/OnlyActive'
      - $ref: '#/components/parameters/query/OrganizationFilter'
    security:
      - bearerAuth: []
    responses:
      200:
        description: Submissions details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmissionsSummaryResult'

      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'

/submission/category/{categoryId}/commit/{submissionId}:
  post:
    summary: Commit Active Submission. (⚠️ this is the final action; all staged changes — inserts, updates, or deletions — will be applied)
    tags:
      - Submission
    parameters:
      - $ref: '#/components/parameters/path/CategoryId'
      - name: submissionId
        in: path
        type: string
        required: true
    security:
      - bearerAuth: []
    responses:
      200:
        description: Commit Submission Result
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitSubmissionResult'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      409:
        $ref: '#/components/responses/StatusConflict'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'

/submission/category/{categoryId}/data:
  post:
    summary: Creates a Submission to add new data for the specified category (⚠️ changes applied only after commit). Returns an Active Submission with the records to be created.
    tags:
      - Submission
    consumes:
      - multipart/form-data
    parameters:
      - $ref: '#/components/parameters/path/CategoryId'
    security:
      - bearerAuth: []
    requestBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              files:
                type: array
                description: >
                  One or multiple files containing the data to insert.  
                  Each file must be based on the template for the corresponding entity  
                  (e.g., **participant.csv**).
                items:
                  type: string
                  format: binary
              organization:
                type: string
                description: >
                  Organization the Submission belongs to.
            required:
              - files
              - organization
    responses:
      200:
        description: Submission accepted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubmissionResult'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'
  put:
    summary: Creates a Submission to modify existing data (⚠️ changes applied only after commit). Returns an Active Submission with the records to be updated.
    tags:
      - Submission
    consumes:
      - multipart/form-data
    parameters:
      - $ref: '#/components/parameters/path/CategoryId'
    security:
      - bearerAuth: []
    requestBody:
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              files:
                type: array
                description: >
                  One or multiple files containing the data to edit.  
                  Each file must be based on the template for the corresponding entity  
                  (e.g., **participant.csv**).  

                  In addition to the template fields, each file must include an extra column named  
                  **systemId**, which represents the unique system identifier used to match and update  
                  existing records in the system.
                items:
                  type: string
                  format: binary
              organization:
                type: string
                description: >
                  Organization the Submission belongs to.
            required:
              - files
              - organization
    responses:
      200:
        description: Edit Data request accepted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubmissionResult'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'

/submission/category/{categoryId}/data/{systemId}:
  delete:
    summary: Creates a Submission to delete existing data by System ID (⚠️ changes applied only after commit). Returns an Active Submission with the records to be deleted.
    tags:
      - Submission
    parameters:
      - $ref: '#/components/parameters/path/CategoryId'
      - name: systemId
        in: path
        required: true
        schema:
          type: string
        description: The unique system ID of the data to be deleted
    security:
      - bearerAuth: []
    responses:
      200:
        description: Delete Data request accepted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubmissionResult'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      403:
        $ref: '#/components/responses/ForbiddenError'
      404:
        $ref: '#/components/responses/NotFound'
      409:
        $ref: '#/components/responses/StatusConflict'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'
