/*
 * Copyright (c) 2025 The Ontario Institute for Cancer Research. All rights reserved
 *
 * This program and the accompanying materials are made available under the terms of
 * the GNU Affero General Public License v3.0. You should have received a copy of the
 * GNU Affero General Public License along with this program.
 *  If not, see <http://www.gnu.org/licenses/>.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* eslint-disable */
/* @ts-no-check */

const copyToken = () => {
	const tokenArea = document.getElementById('accessTokenArea');
	const copyTokenButton = document.getElementById('accessTokenButton');
	tokenArea.focus();
	tokenArea.select();

	navigator.clipboard.writeText(tokenArea.value);

	copyTokenButton.innerText = 'Copied!';
	setTimeout(() => {
		copyTokenButton.innerText = 'Copy';
	}, 1000);
};

const refreshToken = () => {
	window.location.replace('/auth/login');
};

/**
 * Renders the countdown till the access token generated by CILogon expires.
 * @param {number} validTillTime The Unix Epoch till the remaining time
 * @param {HTMLElement} validTillElement The HTML Element containing the "Valid For" time
 */
const renderExpireCountdown = (validTillTime, validTillElement) => {
	const renderTimer = setInterval(() => {
		const timeTillExpiry = validTillTime - new Date().getTime();

		const minutesTill = Math.floor((timeTillExpiry % (1000 * 60 * 60)) / (1000 * 60));
		const secondsTill = Math.floor((timeTillExpiry % (1000 * 60)) / 1000);

		validTillElement.innerText = `${minutesTill}m ${secondsTill}s`;

		if (timeTillExpiry <= 0) {
			clearInterval(renderTimer);
			validTillElement.classList = `${validTillElement.classList} expired`;
			validTillElement.innerText = 'Token Expired';
			return;
		}
	}, 1000);
};

document.addEventListener('DOMContentLoaded', function () {
	const tokenCopyButton = document.getElementById('accessTokenButton');
	tokenCopyButton.addEventListener('click', copyToken);

	const refreshTokenButton = document.getElementById('refreshTokenButton');
	refreshTokenButton.addEventListener('click', refreshToken);
});
