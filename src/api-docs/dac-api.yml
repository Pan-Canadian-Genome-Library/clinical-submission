/dac/{dacId}:
  get:
    summary: Get DAC by their ID
    tags:
      - DAC
    parameters:
      - $ref: '#/components/parameters/path/DacId'
    responses:
      200:
        description: Returns DAC data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DAC'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'
  delete:
    summary: Delete DAC by their ID
    tags:
      - DAC
    parameters:
      - $ref: '#/components/parameters/path/DacId'
    responses:
      200:
        description: Returns DAC Id
        content:
          application/json:
            schema:
              type: object
              properties:
                dacId:
                  type: string
                  description: DAC users ID
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'
  patch:
    summary: Update DAC by their ID
    tags:
      - DAC
    parameters:
      - $ref: '#/components/parameters/path/DacId'
    requestBody:
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              dacName:
                type: string
                description: 'Full name of the DAC'
              dacDescription:
                type: string
                description: 'An in-depth description of the DAC, including its overall purpose, scope and responsibilities.'
              contactName:
                type: string
                description: 'The full name of the primary contact person. Please provide in the format: FirstName LastName E,g Jones Smith'
              contactEmail:
                type: string
                description: 'Contact email for communication'
    responses:
      200:
        description: Returns DAC Fields
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DAC'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'

/dac/create:
  post:
    summary: Create DAC user
    tags:
      - DAC
    requestBody:
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              dacId:
                type: string
                description: 'Username of the DAC'
              dacName:
                type: string
                description: 'Full name of the DAC'
              dacDescription:
                type: string
                description: 'An in-depth description of the DAC, including its overall purpose, scope and responsibilities.'
              contactName:
                type: string
                description: 'The full name of the primary contact person. Please provide in the format: FirstName LastName E,g Jones Smith'
              contactEmail:
                type: string
                description: 'Contact email for communication'
            required:
              - dacId
              - dacName
              - dacDescription
              - contactName
              - contactEmail
    responses:
      200:
        description: Returns DAC data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DAC'
      400:
        $ref: '#/components/responses/BadRequest'
      401:
        $ref: '#/components/responses/UnauthorizedError'
      404:
        $ref: '#/components/responses/NotFound'
      500:
        $ref: '#/components/responses/ServerError'
      503:
        $ref: '#/components/responses/ServiceUnavailableError'
